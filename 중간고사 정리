1. 파이썬  
- 파이썬(Python)은 1991년 귀도 반 로섬(Guido van Rossum)이 발표한 고급 프로그래밍 언어로, 인터프리터와 컴파일러를 지원하는 객체지향적 언어이다. 
- 고급 프로그래밍 언어일 수록 실제 사람이 사용하는 언어에 가까워 배우기 쉽다.
 1) 파이썬의 장점: 배우기 쉽다, 활용성이 높다.(프론트엔드, 백엔드 모두 지원)
 2) 파이썬의 단점: 실행속도가 느리다. 

2. HTML(Hypertext Markup Language)
- 웹사이트 모습을 기술하는 마크업 언어 
- 확장자: 파일명.html
- tag: 명령어의 집합으로 "/"로 마무리한다. 두 개의 쌍으로 구성된다(<>)

3. 프로그래밍 기초 용어 
- object(객체): class로 선언된 변수 
- class: 객체를 만들기 위한 틀 
 - attribute(속성): class에 포함된 변수 
 - method: class에 포함된 함수. class의 기능을 구현한다.
- instance: 소프트웨어에 구현된 실체 
- module: 클래스, 변수, 함수를 모아서 파일로 저장해 둔 것 

4. 파이썬 기본 문법 
 1) 주석: 프로그램 실행과 관계 없이 코드에 대한 설명을 작성할 수 있음. #, '''(여러 줄 주석)
 2) 행분리: 하나의 명령을 여러 줄에 수행할 수 있음. 역슬래쉬(\)
 3) 행결합: 한 줄에 여러 명령을 수행할 수 있음. 세미콜론(;) 
 4) 표준 입력: input() # 표준 입력장치로부터 문자열 입력 / input('문자열') # 문자열을 출력하고 표준 입력장치로부터 문자열 입력 
   * input()으로 출력되는 자료형은 무조건 str으로 저장됨
 5) 변수(variable): 필요한 데이터를 저장해놓는 기억 공간 
  - 파이썬에서 변수는 영문 대소문자를 구분함. 
  - 문자나 _(밑줄 문자)로 시작함. 숫자로 시작할 수 없음.
  - 특수 문자 사용 불가
  - python 키워드 (if, for, while, and, or) 사용 불가
 6) 연산자: 자료를 처리하기 위해 수식을 결합하여 연산을 수행하도록 하는 기호 
  - 산술 연산자: +,-, *, / (더하기 빼기 곱하기 나누기) **(제곱), %(나머지), //(몫) 
  - 비교(관계) 연산자: 비교할 때 사용 / 등호(==), 같지 않음(!=), 부등호(<,>,<=,>=) 
  - 논리 연산자: 주어진 논리식을 판단하여 참(True), 거짓(False) 결정/ 논리곱(and), 논리합(or), not
  - 할당 연산자: 변수에 값을 할당하기 위해 사용 
 7) 데이터 타입 
  - 정수 자료형(int), 실수 자료형(float), 부울 자료형(True,False), 문자열 자료형(str) 
  - 데이터 타입 확인 -> Type() 함수를 사용
  - 데이터 형 변환 -> int(): 정수로 변환 / float(): 실수로 변환 / str(): 문자열로 변환 
 8) 표준 출력: print()
 9) f-string
  - 파이썬 v3.6 이상부터 지원
  - 문자열 내부에 변수를 사용할 경우: {변수}
  - 문자열 내부에 실수 변수를 소수점 처리할 경우: {실수변수: .소수점자리f}

5. 컬렉션 자료형 
 - 컬렉션 자료형이란 여러 가지 요소를 하나로 묶어 사용하는 데이터 타입이다. 
 - 파이썬이 제공하는 컬렉션에는 시퀀스(list, tuple, string), 비시퀀스(set(집합), dictionary)가 있다. 이 중 리스트와 딕셔너리를 주로 사용한다.
 1) 리스트(list)
  - 여러 값을 순서대로 저장하는 자료형으로 인덱스를 통해 접근이 가능하며, 값의 추가, 삭제, 수정이 자유롭게 가능하다. 예시: [1, 2, 3, 4, 5]
  (1) 추가: list명.append(추가요소): 마지막에 추가 / list명.insert(인덱스, 추가요소): 해당 인덱스에 요소 추가 
  (2) 수정: list명[index]=변경값 
  (3) 삭제: list명.pop(): 마지막 요소 삭제 / list명.pop(index): 해당 인덱스 요소 삭제 / list명.remove(요소값): 해당 요소값 삭제, 해당 값이 없으면 오류
  (4) 내장 함수 - sum(): 합/ min(): 최소값/ max(): 최대값/ len(): 개수 
  (5) slicing: 리스트명[시작인덱스: 종료인덱스] * 시작인덱스 ~ 종료인덱스 -1 까지 가져옴
 2) 튜플(tuple)
  - 리스트와 비슷하지만, 한 번 생성된 후에는 수정할 수 없다. 예시: {1, 2, 3, 4, 5}
 3) 딕셔너리(dictionary)
  - 키(key)-값(value) 쌍으로 이루어진 자료형으로, 각 값은 고유한 키에 의해 식별된다. 예시: {'이름': '철수', '나이': 25, '성별': '남자'}
  - 중괄호{}로 작성되며 각 요소는 쉼표(,)로 구분한다. 
  - 순서가 없다
  - key는 변경 불가 / value는 변경 가능 
  (1) 특정 요소값 가져오기: dictionary명[키] 
  (2) 요소 키 컬렉션: dictionary명.keys()
  (3) 요소 값 컬렉션: dictionary명.values()
  (4) 키와 요소 컬렉션은 list로 변환 가능
 4) 집합(set)
  - 중복된 값을 허용하지 않고, 순서가 없는 자료형이다. 예시: {1, 2, 3, 4, 5}
 5) for문: 컬렉션으로부터 하나식 요소(element)를 가져와 루프 내의 문장을 실행한다. 
 6) range(시작숫자, 종료숫자, step): 시작숫자부터 종료숫자 바로 앞 숫자까지 컬렉션을 생성한다.
 7) in 연산자, not in 연산자: 컬렉션에 속한 요소를 확인하기 위한 연산자 

6. Pandas 라이브러리 
 - import pandas as pd를 입력하고 코딩해야함. 
 - 행과 열로 이루어진 2차원 데이터를 다룰 수 있는 라이브러리로, numpy를 기반으로 구축됨. 
 1) Dataframe(df)
  - 정보: df.info() -> 행과 열의 크기, 컬럼명, 자료형을 출력함. 
  - 크기 확인: df.shape() -> 행과 열의 크기, 행 개수, 열 개수를 출력함.
  - 원소 총개수: df.size()
  - 개수 확인: df.count()
  - 열 인덱스: df.columns / 행 인덱스: df.index / 열 인덱스명 변경: df.column = [열명인덱스] / 인덱스를 일반 데이터 열로 전환: df.reset_index()
